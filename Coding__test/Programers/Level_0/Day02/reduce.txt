
//reduce(줄이다)의 기본구조
//--1. 누적 계산
// reduce() 메서드의 가장 간단한 활용 사례는 배열을 상대로 누적 계산을 할 때입니다.
// 예를 들어, 배열에 들어있는 숫자의 누적합을 구해보겠습니다.

const numbers = [2, 4, 3, 1];
const sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // 10

//--2. 최소값, 최대값 계산
//reduce() 메서드는 최소값이나 최대값을 구할 때도 사용할 수 있습니다.
//예를 들어, 숫자 배열에서 최소값과 최대값을 계산해보겠습니다.

const numbers = [2, 4, 3, 1];
const min = numbers.reduce((min, num) => (min < num ? min : num));
console.log(min); // 1
const max = numbers.reduce((max, num) => (max > num ? max : num));
console.log(max); // 4

//--3.개수 세기
// reduce() 함수는 배열에서 각 원소의 개수를 셀 때도 많이 사용됩니다.

const fruits = ["apple", "banana", "apple", "orange", "banana", "apple"];
const fruitCounts = fruits.reduce((counter, fruit) => {
    if (fruit in counter) {
        counter[fruit]++;
    } else {
        counter[fruit] = 1;
    }
    return counter;
}, {});
console.log(fruitCounts); // { apple: 3, banana: 2, orange: 1 }


//--전개 연산자

const fruits2 = ["apple", "banana", "apple", "orange", "banana", "apple"];
const fruitCounts2 = fruits.reduce(
    (counter, fruit) => ({
        ...counter,
        [fruit]: fruit in counter ? counter[fruit] + 1 : 1,
    }),
    {}
);
console.log(fruitCounts); // { apple: 3, banana: 2, orange: 1 }

//array.reduce((accumulator, currentValue) => {
// 누적값(accumulator)과 현재 값(currentValue)을 사용해 어떤 작업을 수행
//     return 새로운 누적값;
// }, 초기값);


// array.reduce(<콜백 함수>, <초기값>);